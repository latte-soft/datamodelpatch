return "    enum EventStatus {\n        unpublished\n        active\n        cancelled\n\t\tmoderated\n    }\n\n    enum RsvpStatus {\n        none\n        going\n        maybeGoing\n        notGoing\n    }\n\n    enum HostType {\n        user\n        group\n    }\n\n    type EventTime {\n        startUtc: String\n        endUtc: String\n    }\n\n    type Host {\n        hostId: ID\n        hostType: HostType\n        hostName: String\n        hasVerifiedBadge: Boolean\n    }\n\n    type Rsvp {\n        userId: ID\n        rsvpStatus: RsvpStatus\n    }\n\n    type RsvpCounters {\n        none: Float\n        going: Float\n        maybeGoing: Float\n        notGoing: Float\n    }\n\n    type VirtualEvent {\n        id: ID String\n        description: String\n        host: Host\n        universeId: ID\n        eventStatus: EventStatus\n        eventTime: EventTime\n        createdUtc: String\n        updatedUtc: String\n        userRsvpStatus: RsvpStatus\n\n        experienceDetails: ExperienceDetails\n        media: [ ExperienceMedia RsvpCounters\n        rsvps: [ Rsvp String,\n        limit: Int\n        fromUtc: String\n    }\n\n    type VirtualEventsPage {\n        cursor: String\n        virtualEvents: [ VirtualEvent Boolean\n        virtualEvent: VirtualEvent\n    }\n\n    type VirtualEventMutations {\n        neverShowNotificationModalAgain: Boolean\n\t\tenablePushNotifications: Boolean\n    }\n\n    type Mutation {\n        virtualEvents: VirtualEventMutations ID RsvpStatus RsvpResponse\n    }\n\n    type Query {\n        virtualEvent(id: ID VirtualEvent\n        virtualEventsByUniverseId(universeId: ID VirtualEventsByUniverseIdOptions): VirtualEventsPage\n    }\n";
