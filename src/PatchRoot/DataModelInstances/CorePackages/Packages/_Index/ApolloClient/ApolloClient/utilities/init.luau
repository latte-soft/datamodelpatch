local v0 = {};
local l_Parent_0 = script.Parent;
local l_Parent_1 = l_Parent_0.Parent;
local l_invariant_0 = require(l_Parent_0.jsutils.invariant).invariant;
local l_DEV_0 = require(script.globals).DEV;
l_invariant_0(typeof(l_DEV_0) == "boolean", (tostring(l_DEV_0)));
v0.DEV = l_DEV_0;
local l_Object_0 = require(l_Parent_1.LuauPolyfill).Object;
v0.NULL = require(script.globals).NULL;
local v6 = require(script.graphql.directives);
v0.shouldInclude = v6.shouldInclude;
v0.hasDirectives = v6.hasDirectives;
v0.hasClientExports = v6.hasClientExports;
v0.getDirectiveNames = v6.getDirectiveNames;
v0.getInclusionDirectives = v6.getInclusionDirectives;
local v7 = require(script.graphql.fragments);
v0.createFragmentMap = v7.createFragmentMap;
v0.getFragmentQueryDocument = v7.getFragmentQueryDocument;
v0.getFragmentFromSelection = v7.getFragmentFromSelection;
local v8 = require(script.graphql.getFromAST);
v0.checkDocument = v8.checkDocument;
v0.getOperationDefinition = v8.getOperationDefinition;
v0.getOperationName = v8.getOperationName;
v0.getFragmentDefinitions = v8.getFragmentDefinitions;
v0.getQueryDefinition = v8.getQueryDefinition;
v0.getFragmentDefinition = v8.getFragmentDefinition;
v0.getMainDefinition = v8.getMainDefinition;
v0.getDefaultValues = v8.getDefaultValues;
local v9 = require(script.graphql.storeUtils);
v0.makeReference = v9.makeReference;
v0.isDocumentNode = v9.isDocumentNode;
v0.isReference = v9.isReference;
v0.isField = v9.isField;
v0.isInlineFragment = v9.isInlineFragment;
v0.valueToObjectRepresentation = v9.valueToObjectRepresentation;
v0.storeKeyNameFromField = v9.storeKeyNameFromField;
v0.argumentsObjectFromField = v9.argumentsObjectFromField;
v0.resultKeyNameFromField = v9.resultKeyNameFromField;
v0.getStoreKeyName = v9.getStoreKeyName;
v0.getTypenameFromResult = v9.getTypenameFromResult;
local v10 = require(script.graphql.transform);
v0.addTypenameToDocument = v10.addTypenameToDocument;
v0.buildQueryFromSelectionSet = v10.buildQueryFromSelectionSet;
v0.removeDirectivesFromDocument = v10.removeDirectivesFromDocument;
v0.removeConnectionDirectiveFromDocument = v10.removeConnectionDirectiveFromDocument;
v0.removeArgumentsFromDocument = v10.removeArgumentsFromDocument;
v0.removeFragmentSpreadFromDocument = v10.removeFragmentSpreadFromDocument;
v0.removeClientSetsFromDocument = v10.removeClientSetsFromDocument;
local v11 = require(script.policies.pagination);
v0.concatPagination = v11.concatPagination;
v0.offsetLimitPagination = v11.offsetLimitPagination;
v0.relayStylePagination = v11.relayStylePagination;
v0.Observable = require(script.observables.Observable).Observable;
l_Object_0.assign(v0, require(script.common.mergeDeep));
l_Object_0.assign(v0, require(script.common.cloneDeep));
l_Object_0.assign(v0, require(script.common.maybeDeepFreeze));
l_Object_0.assign(v0, require(script.common.stringifyForDisplay));
l_Object_0.assign(v0, require(script.observables.iteration));
l_Object_0.assign(v0, require(script.observables.asyncMap));
l_Object_0.assign(v0, (require(script.observables.Concast)));
l_Object_0.assign(v0, require(script.observables.subclassing));
l_Object_0.assign(v0, require(script.common.arrays));
l_Object_0.assign(v0, require(script.common.objects));
l_Object_0.assign(v0, require(script.common.errorHandling));
l_Object_0.assign(v0, require(script.common.canUse));
l_Object_0.assign(v0, require(script.common.compact));
l_Object_0.assign(v0, require(script.common.makeUniqueId));
return v0;
