local v0 = {
    [0] = {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }; 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        0, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }, 
    {
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1, 
        1
    }
};
local function _(v1)
    local v2 = #v1;
    local v3 = 0;
    local v4 = 1;
    for v5 = 1, v2 do
        v3 = v3 + v1[v5] * v4;
        v4 = v4 * 2;
    end;
    return v3;
end;
local function v17(v7, v8)
    local v9 = v0[v7];
    local v10 = v0[v8];
    local v11 = {};
    for v12 = 1, 8 do
        if v9[v12] ~= v10[v12] then
            v11[v12] = 1;
        else
            v11[v12] = 0;
        end;
    end;
    local v13 = #v11;
    local v14 = 0;
    local v15 = 1;
    for v16 = 1, v13 do
        v14 = v14 + v11[v16] * v15;
        v15 = v15 * 2;
    end;
    return v14;
end;
local function v23(v18, v19)
    local v20 = string.format("%o", v18);
    local v21 = {
        ["0"] = "000", 
        ["1"] = "001", 
        ["2"] = "010", 
        ["3"] = "011", 
        ["4"] = "100", 
        ["5"] = "101", 
        ["6"] = "110", 
        ["7"] = "111"
    };
    return string.gsub(string.format(string.format("%%%ds", v19), (string.gsub(string.gsub(v20, "(.)", function(v22)
        return v21[v22];
    end), "^0*(.*)$", "%1"))), " ", "0");
end;
local function _(v24, v25, v26, v27)
    if v25 == "1" then
        v24[v26][v27] = 2;
        return ;
    else
        v24[v26][v27] = -2;
        return ;
    end;
end;
local function v30(v29)
    if not string.match(v29, "^[0-9]+$") then
        if not string.match(v29, "^[0-9A-Z $%%*./:+-]+$") then
            return 4;
        else
            return 2;
        end;
    else
        return 1;
    end;
end;
local v31 = {
    {
        19, 
        16, 
        13, 
        9
    }, 
    {
        34, 
        28, 
        22, 
        16
    }, 
    {
        55, 
        44, 
        34, 
        26
    }, 
    {
        80, 
        64, 
        48, 
        36
    }, 
    {
        108, 
        86, 
        62, 
        46
    }, 
    {
        136, 
        108, 
        76, 
        60
    }, 
    {
        156, 
        124, 
        88, 
        66
    }, 
    {
        194, 
        154, 
        110, 
        86
    }, 
    {
        232, 
        182, 
        132, 
        100
    }, 
    {
        274, 
        216, 
        154, 
        122
    }, 
    {
        324, 
        254, 
        180, 
        140
    }, 
    {
        370, 
        290, 
        206, 
        158
    }, 
    {
        428, 
        334, 
        244, 
        180
    }, 
    {
        461, 
        365, 
        261, 
        197
    }, 
    {
        523, 
        415, 
        295, 
        223
    }, 
    {
        589, 
        453, 
        325, 
        253
    }, 
    {
        647, 
        507, 
        367, 
        283
    }, 
    {
        721, 
        563, 
        397, 
        313
    }, 
    {
        795, 
        627, 
        445, 
        341
    }, 
    {
        861, 
        669, 
        485, 
        385
    }, 
    {
        932, 
        714, 
        512, 
        406
    }, 
    {
        1006, 
        782, 
        568, 
        442
    }, 
    {
        1094, 
        860, 
        614, 
        464
    }, 
    {
        1174, 
        914, 
        664, 
        514
    }, 
    {
        1276, 
        1000, 
        718, 
        538
    }, 
    {
        1370, 
        1062, 
        754, 
        596
    }, 
    {
        1468, 
        1128, 
        808, 
        628
    }, 
    {
        1531, 
        1193, 
        871, 
        661
    }, 
    {
        1631, 
        1267, 
        911, 
        701
    }, 
    {
        1735, 
        1373, 
        985, 
        745
    }, 
    {
        1843, 
        1455, 
        1033, 
        793
    }, 
    {
        1955, 
        1541, 
        1115, 
        845
    }, 
    {
        2071, 
        1631, 
        1171, 
        901
    }, 
    {
        2191, 
        1725, 
        1231, 
        961
    }, 
    {
        2306, 
        1812, 
        1286, 
        986
    }, 
    {
        2434, 
        1914, 
        1354, 
        1054
    }, 
    {
        2566, 
        1992, 
        1426, 
        1096
    }, 
    {
        2702, 
        2102, 
        1502, 
        1142
    }, 
    {
        2812, 
        2216, 
        1582, 
        1222
    }, 
    {
        2956, 
        2334, 
        1666, 
        1276
    }
};
local function v48(v32, v33, v34)
    local l_v33_0 = v33;
    if v33 == 4 then
        l_v33_0 = 3;
    elseif v33 == 8 then
        l_v33_0 = 4;
    end;
    assert(l_v33_0 <= 4);
    local _ = nil;
    local v37 = nil;
    local v38 = nil;
    local v39 = nil;
    local _ = nil;
    local v41 = {
        {
            10, 
            9, 
            8, 
            8
        }, 
        {
            12, 
            11, 
            16, 
            10
        }, 
        {
            14, 
            13, 
            16, 
            12
        }
    };
    local v42 = 40;
    local v43 = v34 or 1;
    local v44 = 1;
    local v45 = 4;
    if (v34 and v34 >= 1) and v34 <= 4 then
        v44 = v34;
        v45 = v34;
    end;
    for v46 = v44, v45 do
        for v47 = 1, #v31 do
            v37 = v31[v47][v46] * 8 - 4;
            if v47 < 10 then
                v38 = v41[1][l_v33_0];
            elseif v47 < 27 then
                v38 = v41[2][l_v33_0];
            elseif v47 <= 40 then
                v38 = v41[3][l_v33_0];
            end;
            v39 = v37 - v38;
            if v32 <= if l_v33_0 == 1 then math.floor((v39 * 3) / 10) else if l_v33_0 == 2 then math.floor((v39 * 2) / 11) else if l_v33_0 == 3 then math.floor((v39 * 1) / 8) else math.floor((v39 * 1) / 13) then
                if v47 <= v42 then
                    v42 = v47;
                    v43 = v46;
                    break;
                else
                    break;
                end;
            end;
        end;
    end;
    return v42, v43;
end;
local function v55(v49, v50, v51)
    local l_v51_0 = v51;
    if v51 == 4 then
        l_v51_0 = 3;
    elseif v51 == 8 then
        l_v51_0 = 4;
    end;
    assert(l_v51_0 <= 4);
    local v53 = {
        {
            10, 
            9, 
            8, 
            8
        }, 
        {
            12, 
            11, 
            16, 
            10
        }, 
        {
            14, 
            13, 
            16, 
            12
        }
    };
    local v54 = nil;
    if v50 < 10 then
        v54 = v53[1][l_v51_0];
    elseif v50 < 27 then
        v54 = v53[2][l_v51_0];
    elseif v50 <= 40 then
        v54 = v53[3][l_v51_0];
    else
        assert(false, "get_length, version > 40 not supported");
    end;
    return (v23(#v49, v54));
end;
local function v64(v56, v57, v58)
    local v59 = nil;
    if not v58 then
        v59 = if not string.match(v56, "^[0-9]+$") then string.match(v56, "^[0-9A-Z $%%*./:+-]+$") and 2 or 4 else 1;
    else
        assert(false, "not implemented");
        v59 = v58;
    end;
    local v60 = nil;
    local _ = nil;
    local v62, v63 = v48(#v56, v59, v57);
    v60 = v62;
    return v60, v63, v23(v59, 4), v59, (v55(v56, v60, v59));
end;
local v65 = {
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    36, 
    -1, 
    -1, 
    -1, 
    37, 
    38, 
    -1, 
    -1, 
    -1, 
    -1, 
    39, 
    40, 
    -1, 
    41, 
    42, 
    43, 
    0, 
    1, 
    2, 
    3, 
    4, 
    5, 
    6, 
    7, 
    8, 
    9, 
    44, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1, 
    10, 
    11, 
    12, 
    13, 
    14, 
    15, 
    16, 
    17, 
    18, 
    19, 
    20, 
    21, 
    22, 
    23, 
    24, 
    25, 
    26, 
    27, 
    28, 
    29, 
    30, 
    31, 
    32, 
    33, 
    34, 
    35, 
    -1, 
    -1, 
    -1, 
    -1, 
    -1
};
local function v70(v66)
    local v67 = "";
    local v68 = nil;
    string.gsub(v66, "..?.?", function(v69)
        v68 = tonumber(v69);
        if #v69 == 3 then
            v67 = v67 .. v23(v68, 10);
            return ;
        elseif #v69 == 2 then
            v67 = v67 .. v23(v68, 7);
            return ;
        else
            v67 = v67 .. v23(v68, 4);
            return ;
        end;
    end);
    return v67;
end;
local function v77(v71)
    local v72 = "";
    local v73 = nil;
    local v74 = nil;
    local v75 = nil;
    string.gsub(v71, "..?", function(v76)
        if #v76 == 2 then
            v74 = v65[string.byte((string.sub(v76, 1, 1)))];
            v75 = v65[string.byte((string.sub(v76, 2, 2)))];
            v73 = v74 * 45 + v75;
            v72 = v72 .. v23(v73, 11);
            return ;
        else
            v73 = v65[string.byte(v76)];
            v72 = v72 .. v23(v73, 6);
            return ;
        end;
    end);
    return v72;
end;
local function v81(v78)
    local v79 = {};
    string.gsub(v78, ".", function(v80)
        v79[#v79 + 1] = v23(string.byte(v80), 8);
    end);
    return table.concat(v79);
end;
local function _(v82, v83)
    if v83 == 1 then
        local v84 = "";
        local v85 = nil;
        string.gsub(v82, "..?.?", function(v86)
            v85 = tonumber(v86);
            if #v86 == 3 then
                v84 = v84 .. v23(v85, 10);
                return ;
            elseif #v86 == 2 then
                v84 = v84 .. v23(v85, 7);
                return ;
            else
                v84 = v84 .. v23(v85, 4);
                return ;
            end;
        end);
        return v84;
    elseif v83 == 2 then
        local v87 = "";
        local v88 = nil;
        local v89 = nil;
        local v90 = nil;
        string.gsub(v82, "..?", function(v91)
            if #v91 == 2 then
                v89 = v65[string.byte((string.sub(v91, 1, 1)))];
                v90 = v65[string.byte((string.sub(v91, 2, 2)))];
                v88 = v89 * 45 + v90;
                v87 = v87 .. v23(v88, 11);
                return ;
            else
                v88 = v65[string.byte(v91)];
                v87 = v87 .. v23(v88, 6);
                return ;
            end;
        end);
        return v87;
    elseif v83 == 4 then
        return v81(v82);
    else
        assert(false, "not implemented yet");
        return ;
    end;
end;
local function v99(v93, v94, v95)
    local v96 = nil;
    local _ = nil;
    local v98 = v31[v93][v94] * 8;
    v96 = math.min(4, v98 - #v95);
    if v96 > 0 then
        v95 = v95 .. string.rep("0", v96);
    end;
    if math.fmod(#v95, 8) ~= 0 then
        v95 = v95 .. string.rep("0", 8 - math.fmod(#v95, 8));
    end;
    assert(math.fmod(#v95, 8) == 0);
    while #v95 < v98 do
        v95 = v95 .. "11101100";
        if #v95 < v98 then
            v95 = v95 .. "00010001";
        end;
    end;
    return v95;
end;
local v100 = {
    [0] = 1; 
    2, 
    4, 
    8, 
    16, 
    32, 
    64, 
    128, 
    29, 
    58, 
    116, 
    232, 
    205, 
    135, 
    19, 
    38, 
    76, 
    152, 
    45, 
    90, 
    180, 
    117, 
    234, 
    201, 
    143, 
    3, 
    6, 
    12, 
    24, 
    48, 
    96, 
    192, 
    157, 
    39, 
    78, 
    156, 
    37, 
    74, 
    148, 
    53, 
    106, 
    212, 
    181, 
    119, 
    238, 
    193, 
    159, 
    35, 
    70, 
    140, 
    5, 
    10, 
    20, 
    40, 
    80, 
    160, 
    93, 
    186, 
    105, 
    210, 
    185, 
    111, 
    222, 
    161, 
    95, 
    190, 
    97, 
    194, 
    153, 
    47, 
    94, 
    188, 
    101, 
    202, 
    137, 
    15, 
    30, 
    60, 
    120, 
    240, 
    253, 
    231, 
    211, 
    187, 
    107, 
    214, 
    177, 
    127, 
    254, 
    225, 
    223, 
    163, 
    91, 
    182, 
    113, 
    226, 
    217, 
    175, 
    67, 
    134, 
    17, 
    34, 
    68, 
    136, 
    13, 
    26, 
    52, 
    104, 
    208, 
    189, 
    103, 
    206, 
    129, 
    31, 
    62, 
    124, 
    248, 
    237, 
    199, 
    147, 
    59, 
    118, 
    236, 
    197, 
    151, 
    51, 
    102, 
    204, 
    133, 
    23, 
    46, 
    92, 
    184, 
    109, 
    218, 
    169, 
    79, 
    158, 
    33, 
    66, 
    132, 
    21, 
    42, 
    84, 
    168, 
    77, 
    154, 
    41, 
    82, 
    164, 
    85, 
    170, 
    73, 
    146, 
    57, 
    114, 
    228, 
    213, 
    183, 
    115, 
    230, 
    209, 
    191, 
    99, 
    198, 
    145, 
    63, 
    126, 
    252, 
    229, 
    215, 
    179, 
    123, 
    246, 
    241, 
    255, 
    227, 
    219, 
    171, 
    75, 
    150, 
    49, 
    98, 
    196, 
    149, 
    55, 
    110, 
    220, 
    165, 
    87, 
    174, 
    65, 
    130, 
    25, 
    50, 
    100, 
    200, 
    141, 
    7, 
    14, 
    28, 
    56, 
    112, 
    224, 
    221, 
    167, 
    83, 
    166, 
    81, 
    162, 
    89, 
    178, 
    121, 
    242, 
    249, 
    239, 
    195, 
    155, 
    43, 
    86, 
    172, 
    69, 
    138, 
    9, 
    18, 
    36, 
    72, 
    144, 
    61, 
    122, 
    244, 
    245, 
    247, 
    243, 
    251, 
    235, 
    203, 
    139, 
    11, 
    22, 
    44, 
    88, 
    176, 
    125, 
    250, 
    233, 
    207, 
    131, 
    27, 
    54, 
    108, 
    216, 
    173, 
    71, 
    142, 
    0, 
    0
};
local v101 = {
    [0] = 256; 
    0, 
    1, 
    25, 
    2, 
    50, 
    26, 
    198, 
    3, 
    223, 
    51, 
    238, 
    27, 
    104, 
    199, 
    75, 
    4, 
    100, 
    224, 
    14, 
    52, 
    141, 
    239, 
    129, 
    28, 
    193, 
    105, 
    248, 
    200, 
    8, 
    76, 
    113, 
    5, 
    138, 
    101, 
    47, 
    225, 
    36, 
    15, 
    33, 
    53, 
    147, 
    142, 
    218, 
    240, 
    18, 
    130, 
    69, 
    29, 
    181, 
    194, 
    125, 
    106, 
    39, 
    249, 
    185, 
    201, 
    154, 
    9, 
    120, 
    77, 
    228, 
    114, 
    166, 
    6, 
    191, 
    139, 
    98, 
    102, 
    221, 
    48, 
    253, 
    226, 
    152, 
    37, 
    179, 
    16, 
    145, 
    34, 
    136, 
    54, 
    208, 
    148, 
    206, 
    143, 
    150, 
    219, 
    189, 
    241, 
    210, 
    19, 
    92, 
    131, 
    56, 
    70, 
    64, 
    30, 
    66, 
    182, 
    163, 
    195, 
    72, 
    126, 
    110, 
    107, 
    58, 
    40, 
    84, 
    250, 
    133, 
    186, 
    61, 
    202, 
    94, 
    155, 
    159, 
    10, 
    21, 
    121, 
    43, 
    78, 
    212, 
    229, 
    172, 
    115, 
    243, 
    167, 
    87, 
    7, 
    112, 
    192, 
    247, 
    140, 
    128, 
    99, 
    13, 
    103, 
    74, 
    222, 
    237, 
    49, 
    197, 
    254, 
    24, 
    227, 
    165, 
    153, 
    119, 
    38, 
    184, 
    180, 
    124, 
    17, 
    68, 
    146, 
    217, 
    35, 
    32, 
    137, 
    46, 
    55, 
    63, 
    209, 
    91, 
    149, 
    188, 
    207, 
    205, 
    144, 
    135, 
    151, 
    178, 
    220, 
    252, 
    190, 
    97, 
    242, 
    86, 
    211, 
    171, 
    20, 
    42, 
    93, 
    158, 
    132, 
    60, 
    57, 
    83, 
    71, 
    109, 
    65, 
    162, 
    31, 
    45, 
    67, 
    216, 
    183, 
    123, 
    164, 
    118, 
    196, 
    23, 
    73, 
    236, 
    127, 
    12, 
    111, 
    246, 
    108, 
    161, 
    59, 
    82, 
    41, 
    157, 
    85, 
    170, 
    251, 
    96, 
    134, 
    177, 
    187, 
    204, 
    62, 
    90, 
    203, 
    89, 
    95, 
    176, 
    156, 
    169, 
    160, 
    81, 
    11, 
    245, 
    22, 
    235, 
    122, 
    117, 
    44, 
    215, 
    79, 
    174, 
    213, 
    233, 
    230, 
    231, 
    173, 
    232, 
    116, 
    214, 
    244, 
    234, 
    168, 
    80, 
    88, 
    175
};
local v102 = {
    [7] = {
        21, 
        102, 
        238, 
        149, 
        146, 
        229, 
        87, 
        0
    }, 
    [10] = {
        45, 
        32, 
        94, 
        64, 
        70, 
        118, 
        61, 
        46, 
        67, 
        251, 
        0
    }, 
    [13] = {
        78, 
        140, 
        206, 
        218, 
        130, 
        104, 
        106, 
        100, 
        86, 
        100, 
        176, 
        152, 
        74, 
        0
    }, 
    [15] = {
        105, 
        99, 
        5, 
        124, 
        140, 
        237, 
        58, 
        58, 
        51, 
        37, 
        202, 
        91, 
        61, 
        183, 
        8, 
        0
    }, 
    [16] = {
        120, 
        225, 
        194, 
        182, 
        169, 
        147, 
        191, 
        91, 
        3, 
        76, 
        161, 
        102, 
        109, 
        107, 
        104, 
        120, 
        0
    }, 
    [17] = {
        136, 
        163, 
        243, 
        39, 
        150, 
        99, 
        24, 
        147, 
        214, 
        206, 
        123, 
        239, 
        43, 
        78, 
        206, 
        139, 
        43, 
        0
    }, 
    [18] = {
        153, 
        96, 
        98, 
        5, 
        179, 
        252, 
        148, 
        152, 
        187, 
        79, 
        170, 
        118, 
        97, 
        184, 
        94, 
        158, 
        234, 
        215, 
        0
    }, 
    [20] = {
        190, 
        188, 
        212, 
        212, 
        164, 
        156, 
        239, 
        83, 
        225, 
        221, 
        180, 
        202, 
        187, 
        26, 
        163, 
        61, 
        50, 
        79, 
        60, 
        17, 
        0
    }, 
    [22] = {
        231, 
        165, 
        105, 
        160, 
        134, 
        219, 
        80, 
        98, 
        172, 
        8, 
        74, 
        200, 
        53, 
        221, 
        109, 
        14, 
        230, 
        93, 
        242, 
        247, 
        171, 
        210, 
        0
    }, 
    [24] = {
        21, 
        227, 
        96, 
        87, 
        232, 
        117, 
        0, 
        111, 
        218, 
        228, 
        226, 
        192, 
        152, 
        169, 
        180, 
        159, 
        126, 
        251, 
        117, 
        211, 
        48, 
        135, 
        121, 
        229, 
        0
    }, 
    [26] = {
        70, 
        218, 
        145, 
        153, 
        227, 
        48, 
        102, 
        13, 
        142, 
        245, 
        21, 
        161, 
        53, 
        165, 
        28, 
        111, 
        201, 
        145, 
        17, 
        118, 
        182, 
        103, 
        2, 
        158, 
        125, 
        173, 
        0
    }, 
    [28] = {
        123, 
        9, 
        37, 
        242, 
        119, 
        212, 
        195, 
        42, 
        87, 
        245, 
        43, 
        21, 
        201, 
        232, 
        27, 
        205, 
        147, 
        195, 
        190, 
        110, 
        180, 
        108, 
        234, 
        224, 
        104, 
        200, 
        223, 
        168, 
        0
    }, 
    [30] = {
        180, 
        192, 
        40, 
        238, 
        216, 
        251, 
        37, 
        156, 
        130, 
        224, 
        193, 
        226, 
        173, 
        42, 
        125, 
        222, 
        96, 
        239, 
        86, 
        110, 
        48, 
        50, 
        182, 
        179, 
        31, 
        216, 
        152, 
        145, 
        173, 
        41, 
        0
    }
};
local function v107(v103)
    local v104 = {};
    local _ = string.gsub(v103, "(........)", function(v105)
        v104[#v104 + 1] = tonumber(v105, 2);
    end);
    return v104;
end;
local function v114(v108, v109)
    local v110 = {
        [0] = 0
    };
    for v111 = 0, (v109 - v108) - 1 do
        v110[v111] = 0;
    end;
    local v112 = v102[v108];
    for v113 = 1, v108 + 1 do
        v110[((v109 - v108) + v113) - 1] = v112[v113];
    end;
    return v110;
end;
local function _(v115)
    local v116 = {};
    for v117 = 0, #v115 do
        v116[v117] = v101[v115[v117]];
    end;
    return v116;
end;
local _ = function(v119, _)
    local v121 = {};
    for v122 = 0, #v119 do
        v121[v122] = v100[v119[v122]];
    end;
    return v121;
end;
local function v153(v124, v125)
    local v126 = nil;
    if type(v124) == "string" then
        local v127 = {};
        local l_v127_0 = v127 --[[ copy: 3 -> 17 ]];
        local _ = string.gsub(v124, "(........)", function(v129)
            l_v127_0[#l_v127_0 + 1] = tonumber(v129, 2);
        end);
        v126 = v127;
    elseif type(v124) == "table" then
        v126 = v124;
    else
        assert(false, "Unknown type for data: %s", (type(v124)));
    end;
    local v131 = #v126;
    local v132 = (v131 + v125) - 1;
    local v133 = nil;
    local v134 = nil;
    local _ = nil;
    local v136 = {};
    local v137 = {};
    local v138 = {};
    for v139 = 1, v131 do
        v137[(v132 - v139) + 1] = v126[v139];
    end;
    for v140 = 1, v132 - v131 do
        v137[v140] = 0;
    end;
    v137[0] = 0;
    local l_v137_0 = v137;
    local v142 = {};
    for v143 = 0, #l_v137_0 do
        v142[v143] = v101[l_v137_0[v143]];
    end;
    v138 = v142;
    while v125 <= v132 do
        v133 = v114(v125, v132);
        l_v137_0 = v138[v132];
        for v144 = v132, v132 - v125, -1 do
            if l_v137_0 ~= 256 then
                if v133[v144] + l_v137_0 >= 255 then
                    v133[v144] = math.fmod(v133[v144] + l_v137_0, 255);
                else
                    v133[v144] = v133[v144] + l_v137_0;
                end;
            else
                v133[v144] = 256;
            end;
        end;
        for v145 = (v132 - v125) - 1, 0, -1 do
            v133[v145] = 256;
        end;
        v142 = v133;
        local v146 = {};
        for v147 = 0, #v142 do
            v146[v147] = v100[v142[v147]];
        end;
        v136 = v146;
        v142 = v138;
        v146 = {};
        for v148 = 0, #v142 do
            v146[v148] = v100[v142[v148]];
        end;
        v137 = v146;
        v134 = {};
        for v149 = v132, 0, -1 do
            v134[v149] = v17(v136[v149], v137[v149]);
        end;
        for v150 = v132, 0, -1 do
            if v150 >= v125 and v134[v150] == 0 then
                v134[v150] = nil;
                v132 = v132 - 1;
            else
                break;
            end;
        end;
        v137 = v134;
        v142 = v137;
        v146 = {};
        for v151 = 0, #v142 do
            v146[v151] = v101[v142[v151]];
        end;
        v138 = v146;
    end;
    l_v137_0 = {};
    for v152 = #v137, 0, -1 do
        l_v137_0[#l_v137_0 + 1] = v137[v152];
    end;
    return l_v137_0;
end;
local v154 = {
    {
        {
            1, 
            {
                26, 
                19, 
                2
            }
        }, 
        {
            1, 
            {
                26, 
                16, 
                4
            }
        }, 
        {
            1, 
            {
                26, 
                13, 
                6
            }
        }, 
        {
            1, 
            {
                26, 
                9, 
                8
            }
        }
    }, 
    {
        {
            1, 
            {
                44, 
                34, 
                4
            }
        }, 
        {
            1, 
            {
                44, 
                28, 
                8
            }
        }, 
        {
            1, 
            {
                44, 
                22, 
                11
            }
        }, 
        {
            1, 
            {
                44, 
                16, 
                14
            }
        }
    }, 
    {
        {
            1, 
            {
                70, 
                55, 
                7
            }
        }, 
        {
            1, 
            {
                70, 
                44, 
                13
            }
        }, 
        {
            2, 
            {
                35, 
                17, 
                9
            }
        }, 
        {
            2, 
            {
                35, 
                13, 
                11
            }
        }
    }, 
    {
        {
            1, 
            {
                100, 
                80, 
                10
            }
        }, 
        {
            2, 
            {
                50, 
                32, 
                9
            }
        }, 
        {
            2, 
            {
                50, 
                24, 
                13
            }
        }, 
        {
            4, 
            {
                25, 
                9, 
                8
            }
        }
    }, 
    {
        {
            1, 
            {
                134, 
                108, 
                13
            }
        }, 
        {
            2, 
            {
                67, 
                43, 
                12
            }
        }, 
        {
            2, 
            {
                33, 
                15, 
                9
            }, 
            2, 
            {
                34, 
                16, 
                9
            }
        }, 
        {
            2, 
            {
                33, 
                11, 
                11
            }, 
            2, 
            {
                34, 
                12, 
                11
            }
        }
    }, 
    {
        {
            2, 
            {
                86, 
                68, 
                9
            }
        }, 
        {
            4, 
            {
                43, 
                27, 
                8
            }
        }, 
        {
            4, 
            {
                43, 
                19, 
                12
            }
        }, 
        {
            4, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            2, 
            {
                98, 
                78, 
                10
            }
        }, 
        {
            4, 
            {
                49, 
                31, 
                9
            }
        }, 
        {
            2, 
            {
                32, 
                14, 
                9
            }, 
            4, 
            {
                33, 
                15, 
                9
            }
        }, 
        {
            4, 
            {
                39, 
                13, 
                13
            }, 
            1, 
            {
                40, 
                14, 
                13
            }
        }
    }, 
    {
        {
            2, 
            {
                121, 
                97, 
                12
            }
        }, 
        {
            2, 
            {
                60, 
                38, 
                11
            }, 
            2, 
            {
                61, 
                39, 
                11
            }
        }, 
        {
            4, 
            {
                40, 
                18, 
                11
            }, 
            2, 
            {
                41, 
                19, 
                11
            }
        }, 
        {
            4, 
            {
                40, 
                14, 
                13
            }, 
            2, 
            {
                41, 
                15, 
                13
            }
        }
    }, 
    {
        {
            2, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            3, 
            {
                58, 
                36, 
                11
            }, 
            2, 
            {
                59, 
                37, 
                11
            }
        }, 
        {
            4, 
            {
                36, 
                16, 
                10
            }, 
            4, 
            {
                37, 
                17, 
                10
            }
        }, 
        {
            4, 
            {
                36, 
                12, 
                12
            }, 
            4, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            2, 
            {
                86, 
                68, 
                9
            }, 
            2, 
            {
                87, 
                69, 
                9
            }
        }, 
        {
            4, 
            {
                69, 
                43, 
                13
            }, 
            1, 
            {
                70, 
                44, 
                13
            }
        }, 
        {
            6, 
            {
                43, 
                19, 
                12
            }, 
            2, 
            {
                44, 
                20, 
                12
            }
        }, 
        {
            6, 
            {
                43, 
                15, 
                14
            }, 
            2, 
            {
                44, 
                16, 
                14
            }
        }
    }, 
    {
        {
            4, 
            {
                101, 
                81, 
                10
            }
        }, 
        {
            1, 
            {
                80, 
                50, 
                15
            }, 
            4, 
            {
                81, 
                51, 
                15
            }
        }, 
        {
            4, 
            {
                50, 
                22, 
                14
            }, 
            4, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            3, 
            {
                36, 
                12, 
                12
            }, 
            8, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            2, 
            {
                116, 
                92, 
                12
            }, 
            2, 
            {
                117, 
                93, 
                12
            }
        }, 
        {
            6, 
            {
                58, 
                36, 
                11
            }, 
            2, 
            {
                59, 
                37, 
                11
            }
        }, 
        {
            4, 
            {
                46, 
                20, 
                13
            }, 
            6, 
            {
                47, 
                21, 
                13
            }
        }, 
        {
            7, 
            {
                42, 
                14, 
                14
            }, 
            4, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            4, 
            {
                133, 
                107, 
                13
            }
        }, 
        {
            8, 
            {
                59, 
                37, 
                11
            }, 
            1, 
            {
                60, 
                38, 
                11
            }
        }, 
        {
            8, 
            {
                44, 
                20, 
                12
            }, 
            4, 
            {
                45, 
                21, 
                12
            }
        }, 
        {
            12, 
            {
                33, 
                11, 
                11
            }, 
            4, 
            {
                34, 
                12, 
                11
            }
        }
    }, 
    {
        {
            3, 
            {
                145, 
                115, 
                15
            }, 
            1, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            4, 
            {
                64, 
                40, 
                12
            }, 
            5, 
            {
                65, 
                41, 
                12
            }
        }, 
        {
            11, 
            {
                36, 
                16, 
                10
            }, 
            5, 
            {
                37, 
                17, 
                10
            }
        }, 
        {
            11, 
            {
                36, 
                12, 
                12
            }, 
            5, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            5, 
            {
                109, 
                87, 
                11
            }, 
            1, 
            {
                110, 
                88, 
                11
            }
        }, 
        {
            5, 
            {
                65, 
                41, 
                12
            }, 
            5, 
            {
                66, 
                42, 
                12
            }
        }, 
        {
            5, 
            {
                54, 
                24, 
                15
            }, 
            7, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            11, 
            {
                36, 
                12, 
                12
            }, 
            7, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            5, 
            {
                122, 
                98, 
                12
            }, 
            1, 
            {
                123, 
                99, 
                12
            }
        }, 
        {
            7, 
            {
                73, 
                45, 
                14
            }, 
            3, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            15, 
            {
                43, 
                19, 
                12
            }, 
            2, 
            {
                44, 
                20, 
                12
            }
        }, 
        {
            3, 
            {
                45, 
                15, 
                15
            }, 
            13, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            1, 
            {
                135, 
                107, 
                14
            }, 
            5, 
            {
                136, 
                108, 
                14
            }
        }, 
        {
            10, 
            {
                74, 
                46, 
                14
            }, 
            1, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            1, 
            {
                50, 
                22, 
                14
            }, 
            15, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            2, 
            {
                42, 
                14, 
                14
            }, 
            17, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            5, 
            {
                150, 
                120, 
                15
            }, 
            1, 
            {
                151, 
                121, 
                15
            }
        }, 
        {
            9, 
            {
                69, 
                43, 
                13
            }, 
            4, 
            {
                70, 
                44, 
                13
            }
        }, 
        {
            17, 
            {
                50, 
                22, 
                14
            }, 
            1, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            2, 
            {
                42, 
                14, 
                14
            }, 
            19, 
            {
                43, 
                15, 
                14
            }
        }
    }, 
    {
        {
            3, 
            {
                141, 
                113, 
                14
            }, 
            4, 
            {
                142, 
                114, 
                14
            }
        }, 
        {
            3, 
            {
                70, 
                44, 
                13
            }, 
            11, 
            {
                71, 
                45, 
                13
            }
        }, 
        {
            17, 
            {
                47, 
                21, 
                13
            }, 
            4, 
            {
                48, 
                22, 
                13
            }
        }, 
        {
            9, 
            {
                39, 
                13, 
                13
            }, 
            16, 
            {
                40, 
                14, 
                13
            }
        }
    }, 
    {
        {
            3, 
            {
                135, 
                107, 
                14
            }, 
            5, 
            {
                136, 
                108, 
                14
            }
        }, 
        {
            3, 
            {
                67, 
                41, 
                13
            }, 
            13, 
            {
                68, 
                42, 
                13
            }
        }, 
        {
            15, 
            {
                54, 
                24, 
                15
            }, 
            5, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            15, 
            {
                43, 
                15, 
                14
            }, 
            10, 
            {
                44, 
                16, 
                14
            }
        }
    }, 
    {
        {
            4, 
            {
                144, 
                116, 
                14
            }, 
            4, 
            {
                145, 
                117, 
                14
            }
        }, 
        {
            17, 
            {
                68, 
                42, 
                13
            }
        }, 
        {
            17, 
            {
                50, 
                22, 
                14
            }, 
            6, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            19, 
            {
                46, 
                16, 
                15
            }, 
            6, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            2, 
            {
                139, 
                111, 
                14
            }, 
            7, 
            {
                140, 
                112, 
                14
            }
        }, 
        {
            17, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            7, 
            {
                54, 
                24, 
                15
            }, 
            16, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            34, 
            {
                37, 
                13, 
                12
            }
        }
    }, 
    {
        {
            4, 
            {
                151, 
                121, 
                15
            }, 
            5, 
            {
                152, 
                122, 
                15
            }
        }, 
        {
            4, 
            {
                75, 
                47, 
                14
            }, 
            14, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            11, 
            {
                54, 
                24, 
                15
            }, 
            14, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            16, 
            {
                45, 
                15, 
                15
            }, 
            14, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            6, 
            {
                147, 
                117, 
                15
            }, 
            4, 
            {
                148, 
                118, 
                15
            }
        }, 
        {
            6, 
            {
                73, 
                45, 
                14
            }, 
            14, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            11, 
            {
                54, 
                24, 
                15
            }, 
            16, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            30, 
            {
                46, 
                16, 
                15
            }, 
            2, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            8, 
            {
                132, 
                106, 
                13
            }, 
            4, 
            {
                133, 
                107, 
                13
            }
        }, 
        {
            8, 
            {
                75, 
                47, 
                14
            }, 
            13, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            7, 
            {
                54, 
                24, 
                15
            }, 
            22, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            22, 
            {
                45, 
                15, 
                15
            }, 
            13, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            10, 
            {
                142, 
                114, 
                14
            }, 
            2, 
            {
                143, 
                115, 
                14
            }
        }, 
        {
            19, 
            {
                74, 
                46, 
                14
            }, 
            4, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            28, 
            {
                50, 
                22, 
                14
            }, 
            6, 
            {
                51, 
                23, 
                14
            }
        }, 
        {
            33, 
            {
                46, 
                16, 
                15
            }, 
            4, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            8, 
            {
                152, 
                122, 
                15
            }, 
            4, 
            {
                153, 
                123, 
                15
            }
        }, 
        {
            22, 
            {
                73, 
                45, 
                14
            }, 
            3, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            8, 
            {
                53, 
                23, 
                15
            }, 
            26, 
            {
                54, 
                24, 
                15
            }
        }, 
        {
            12, 
            {
                45, 
                15, 
                15
            }, 
            28, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            3, 
            {
                147, 
                117, 
                15
            }, 
            10, 
            {
                148, 
                118, 
                15
            }
        }, 
        {
            3, 
            {
                73, 
                45, 
                14
            }, 
            23, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            4, 
            {
                54, 
                24, 
                15
            }, 
            31, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            11, 
            {
                45, 
                15, 
                15
            }, 
            31, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            7, 
            {
                146, 
                116, 
                15
            }, 
            7, 
            {
                147, 
                117, 
                15
            }
        }, 
        {
            21, 
            {
                73, 
                45, 
                14
            }, 
            7, 
            {
                74, 
                46, 
                14
            }
        }, 
        {
            1, 
            {
                53, 
                23, 
                15
            }, 
            37, 
            {
                54, 
                24, 
                15
            }
        }, 
        {
            19, 
            {
                45, 
                15, 
                15
            }, 
            26, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            5, 
            {
                145, 
                115, 
                15
            }, 
            10, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            19, 
            {
                75, 
                47, 
                14
            }, 
            10, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            15, 
            {
                54, 
                24, 
                15
            }, 
            25, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            23, 
            {
                45, 
                15, 
                15
            }, 
            25, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            13, 
            {
                145, 
                115, 
                15
            }, 
            3, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            2, 
            {
                74, 
                46, 
                14
            }, 
            29, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            42, 
            {
                54, 
                24, 
                15
            }, 
            1, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            23, 
            {
                45, 
                15, 
                15
            }, 
            28, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            17, 
            {
                145, 
                115, 
                15
            }
        }, 
        {
            10, 
            {
                74, 
                46, 
                14
            }, 
            23, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            10, 
            {
                54, 
                24, 
                15
            }, 
            35, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            19, 
            {
                45, 
                15, 
                15
            }, 
            35, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            17, 
            {
                145, 
                115, 
                15
            }, 
            1, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            14, 
            {
                74, 
                46, 
                14
            }, 
            21, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            29, 
            {
                54, 
                24, 
                15
            }, 
            19, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            11, 
            {
                45, 
                15, 
                15
            }, 
            46, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            13, 
            {
                145, 
                115, 
                15
            }, 
            6, 
            {
                146, 
                116, 
                15
            }
        }, 
        {
            14, 
            {
                74, 
                46, 
                14
            }, 
            23, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            44, 
            {
                54, 
                24, 
                15
            }, 
            7, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            59, 
            {
                46, 
                16, 
                15
            }, 
            1, 
            {
                47, 
                17, 
                15
            }
        }
    }, 
    {
        {
            12, 
            {
                151, 
                121, 
                15
            }, 
            7, 
            {
                152, 
                122, 
                15
            }
        }, 
        {
            12, 
            {
                75, 
                47, 
                14
            }, 
            26, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            39, 
            {
                54, 
                24, 
                15
            }, 
            14, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            22, 
            {
                45, 
                15, 
                15
            }, 
            41, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            6, 
            {
                151, 
                121, 
                15
            }, 
            14, 
            {
                152, 
                122, 
                15
            }
        }, 
        {
            6, 
            {
                75, 
                47, 
                14
            }, 
            34, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            46, 
            {
                54, 
                24, 
                15
            }, 
            10, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            2, 
            {
                45, 
                15, 
                15
            }, 
            64, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            17, 
            {
                152, 
                122, 
                15
            }, 
            4, 
            {
                153, 
                123, 
                15
            }
        }, 
        {
            29, 
            {
                74, 
                46, 
                14
            }, 
            14, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            49, 
            {
                54, 
                24, 
                15
            }, 
            10, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            24, 
            {
                45, 
                15, 
                15
            }, 
            46, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            4, 
            {
                152, 
                122, 
                15
            }, 
            18, 
            {
                153, 
                123, 
                15
            }
        }, 
        {
            13, 
            {
                74, 
                46, 
                14
            }, 
            32, 
            {
                75, 
                47, 
                14
            }
        }, 
        {
            48, 
            {
                54, 
                24, 
                15
            }, 
            14, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            42, 
            {
                45, 
                15, 
                15
            }, 
            32, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            20, 
            {
                147, 
                117, 
                15
            }, 
            4, 
            {
                148, 
                118, 
                15
            }
        }, 
        {
            40, 
            {
                75, 
                47, 
                14
            }, 
            7, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            43, 
            {
                54, 
                24, 
                15
            }, 
            22, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            10, 
            {
                45, 
                15, 
                15
            }, 
            67, 
            {
                46, 
                16, 
                15
            }
        }
    }, 
    {
        {
            19, 
            {
                148, 
                118, 
                15
            }, 
            6, 
            {
                149, 
                119, 
                15
            }
        }, 
        {
            18, 
            {
                75, 
                47, 
                14
            }, 
            31, 
            {
                76, 
                48, 
                14
            }
        }, 
        {
            34, 
            {
                54, 
                24, 
                15
            }, 
            34, 
            {
                55, 
                25, 
                15
            }
        }, 
        {
            20, 
            {
                45, 
                15, 
                15
            }, 
            61, 
            {
                46, 
                16, 
                15
            }
        }
    }
};
local v155 = {
    0, 
    7, 
    7, 
    7, 
    7, 
    7, 
    0, 
    0, 
    0, 
    0, 
    0, 
    0, 
    0, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    4, 
    4, 
    4, 
    4, 
    4, 
    4, 
    4, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    3, 
    0, 
    0, 
    0, 
    0, 
    0, 
    0
};
local function v176(v156, v157, v158)
    if type(v158) == "table" then
        local v159 = "";
        for v160 = 1, #v158 do
            v159 = v159 .. v23(v158[v160], 8);
        end;
        v158 = v159;
    end;
    local v161 = v154[v156][v157];
    local v162 = nil;
    local v163 = nil;
    local v164 = {};
    local v165 = {};
    local v166 = 1;
    local v167 = 0;
    local v168 = 0;
    for v169 = 1, #v161 / 2 do
        for _ = 1, v161[2 * v169 - 1] do
            v162 = v161[2 * v169][2];
            v163 = v161[2 * v169][1] - v161[2 * v169][2];
            v168 = v168 + v163 * 8;
            v164[#v164 + 1] = string.sub(v158, v167 * 8 + 1, (v167 + v162) * 8);
            tmp_tab = v153(v164[#v164], v163);
            tmp_str = "";
            for v171 = 1, #tmp_tab do
                tmp_str = tmp_str .. v23(tmp_tab[v171], 8);
            end;
            v165[#v165 + 1] = tmp_str;
            v167 = v167 + v162;
            v166 = v166 + 1;
        end;
    end;
    local v172 = "";
    v167 = 1;
    while true do
        for v173 = 1, #v164 do
            if v167 < #v164[v173] then
                v172 = v172 .. string.sub(v164[v173], v167, v167 + 7);
            end;
        end;
        v167 = v167 + 8;
        if not (#v172 ~= #v158) then
            break;
        end;
    end;
    local v174 = "";
    v167 = 1;
    while true do
        for v175 = 1, #v165 do
            if v167 < #v165[v175] then
                v174 = v174 .. string.sub(v165[v175], v167, v167 + 7);
            end;
        end;
        v167 = v167 + 8;
        if not (#v174 ~= v168) then
            break;
        end;
    end;
    return v172 .. v174;
end;
local function v184(v177)
    local v178 = #v177;
    for v179 = 1, 8 do
        for v180 = 1, 8 do
            v177[v179][v180] = -2;
            v177[(v178 - 8) + v179][v180] = -2;
            v177[v179][(v178 - 8) + v180] = -2;
        end;
    end;
    for v181 = 1, 7 do
        v177[1][v181] = 2;
        v177[7][v181] = 2;
        v177[v181][1] = 2;
        v177[v181][7] = 2;
        v177[v178][v181] = 2;
        v177[v178 - 6][v181] = 2;
        v177[(v178 - v181) + 1][1] = 2;
        v177[(v178 - v181) + 1][7] = 2;
        v177[1][(v178 - v181) + 1] = 2;
        v177[7][(v178 - v181) + 1] = 2;
        v177[v181][v178 - 6] = 2;
        v177[v181][v178] = 2;
    end;
    for v182 = 1, 3 do
        for v183 = 1, 3 do
            v177[2 + v183][v182 + 2] = 2;
            v177[(v178 - v183) - 1][v182 + 2] = 2;
            v177[2 + v183][(v178 - v182) - 1] = 2;
        end;
    end;
end;
local function v190(v185)
    local v186 = nil;
    local v187 = nil;
    v186 = 7;
    v187 = 9;
    for v188 = v187, #v185 - 8 do
        if math.fmod(v188, 2) == 1 then
            v185[v188][v186] = 2;
        else
            v185[v188][v186] = -2;
        end;
    end;
    for v189 = v187, #v185 - 8 do
        if math.fmod(v189, 2) == 1 then
            v185[v186][v189] = 2;
        else
            v185[v186][v189] = -2;
        end;
    end;
end;
local v191 = {
    {}, 
    {
        6, 
        18
    }, 
    {
        6, 
        22
    }, 
    {
        6, 
        26
    }, 
    {
        6, 
        30
    }, 
    {
        6, 
        34
    }, 
    {
        6, 
        22, 
        38
    }, 
    {
        6, 
        24, 
        42
    }, 
    {
        6, 
        26, 
        46
    }, 
    {
        6, 
        28, 
        50
    }, 
    {
        6, 
        30, 
        54
    }, 
    {
        6, 
        32, 
        58
    }, 
    {
        6, 
        34, 
        62
    }, 
    {
        6, 
        26, 
        46, 
        66
    }, 
    {
        6, 
        26, 
        48, 
        70
    }, 
    {
        6, 
        26, 
        50, 
        74
    }, 
    {
        6, 
        30, 
        54, 
        78
    }, 
    {
        6, 
        30, 
        56, 
        82
    }, 
    {
        6, 
        30, 
        58, 
        86
    }, 
    {
        6, 
        34, 
        62, 
        90
    }, 
    {
        6, 
        28, 
        50, 
        72, 
        94
    }, 
    {
        6, 
        26, 
        50, 
        74, 
        98
    }, 
    {
        6, 
        30, 
        54, 
        78, 
        102
    }, 
    {
        6, 
        28, 
        54, 
        80, 
        106
    }, 
    {
        6, 
        32, 
        58, 
        84, 
        110
    }, 
    {
        6, 
        30, 
        58, 
        86, 
        114
    }, 
    {
        6, 
        34, 
        62, 
        90, 
        118
    }, 
    {
        6, 
        26, 
        50, 
        74, 
        98, 
        122
    }, 
    {
        6, 
        30, 
        54, 
        78, 
        102, 
        126
    }, 
    {
        6, 
        26, 
        52, 
        78, 
        104, 
        130
    }, 
    {
        6, 
        30, 
        56, 
        82, 
        108, 
        134
    }, 
    {
        6, 
        34, 
        60, 
        86, 
        112, 
        138
    }, 
    {
        6, 
        30, 
        58, 
        86, 
        114, 
        142
    }, 
    {
        6, 
        34, 
        62, 
        90, 
        118, 
        146
    }, 
    {
        6, 
        30, 
        54, 
        78, 
        102, 
        126, 
        150
    }, 
    {
        6, 
        24, 
        50, 
        76, 
        102, 
        128, 
        154
    }, 
    {
        6, 
        28, 
        54, 
        80, 
        106, 
        132, 
        158
    }, 
    {
        6, 
        32, 
        58, 
        84, 
        110, 
        136, 
        162
    }, 
    {
        6, 
        26, 
        54, 
        82, 
        110, 
        138, 
        166
    }, 
    {
        6, 
        30, 
        58, 
        86, 
        114, 
        142, 
        170
    }
};
local function v198(v192)
    local v193 = v191[(#v192 - 17) / 4];
    local v194 = nil;
    local v195 = nil;
    for v196 = 1, #v193 do
        for v197 = 1, #v193 do
            if ((not (v196 == 1) or v197 ~= 1) and (not (v196 == #v193) or v197 ~= 1)) and (not (v196 == 1) or v197 ~= #v193) then
                v194 = v193[v196] + 1;
                v195 = v193[v197] + 1;
                v192[v194][v195] = 2;
                v192[v194 + 1][v195] = -2;
                v192[v194 - 1][v195] = -2;
                v192[v194 + 2][v195] = 2;
                v192[v194 - 2][v195] = 2;
                v192[v194][v195 - 2] = 2;
                v192[v194 + 1][v195 - 2] = 2;
                v192[v194 - 1][v195 - 2] = 2;
                v192[v194 + 2][v195 - 2] = 2;
                v192[v194 - 2][v195 - 2] = 2;
                v192[v194][v195 + 2] = 2;
                v192[v194 + 1][v195 + 2] = 2;
                v192[v194 - 1][v195 + 2] = 2;
                v192[v194 + 2][v195 + 2] = 2;
                v192[v194 - 2][v195 + 2] = 2;
                v192[v194][v195 - 1] = -2;
                v192[v194 + 1][v195 - 1] = -2;
                v192[v194 - 1][v195 - 1] = -2;
                v192[v194 + 2][v195 - 1] = 2;
                v192[v194 - 2][v195 - 1] = 2;
                v192[v194][v195 + 1] = -2;
                v192[v194 + 1][v195 + 1] = -2;
                v192[v194 - 1][v195 + 1] = -2;
                v192[v194 + 2][v195 + 1] = 2;
                v192[v194 - 2][v195 + 1] = 2;
            end;
        end;
    end;
end;
local v199 = {
    {
        [-1] = "111111111111111", 
        [0] = "111011111000100"; 
        "111001011110011", 
        "111110110101010", 
        "111100010011101", 
        "110011000101111", 
        "110001100011000", 
        "110110001000001", 
        "110100101110110"
    }, 
    {
        [-1] = "111111111111111", 
        [0] = "101010000010010"; 
        "101000100100101", 
        "101111001111100", 
        "101101101001011", 
        "100010111111001", 
        "100000011001110", 
        "100111110010111", 
        "100101010100000"
    }, 
    {
        [-1] = "111111111111111", 
        [0] = "011010101011111"; 
        "011000001101000", 
        "011111100110001", 
        "011101000000110", 
        "010010010110100", 
        "010000110000011", 
        "010111011011010", 
        "010101111101101"
    }, 
    {
        [-1] = "111111111111111", 
        [0] = "001011010001001"; 
        "001001110111110", 
        "001110011100111", 
        "001100111010000", 
        "000011101100010", 
        "000001001010101", 
        "000110100001100", 
        "000100000111011"
    }
};
local function v215(v200, v201, v202)
    local v203 = v199[v201][v202];
    local _ = nil;
    for v205 = 1, 7 do
        local v206 = string.sub(v203, v205, v205);
        local v207 = (#v200 - v205) + 1;
        if v206 == "1" then
            v200[9][v207] = 2;
        else
            v200[9][v207] = -2;
        end;
    end;
    if string.sub(v203, 8, 8) == "1" then
        v200[9][9] = 2;
    else
        v200[9][9] = -2;
    end;
    if string.sub(v203, 9, 9) == "1" then
        v200[9][8] = 2;
    else
        v200[9][8] = -2;
    end;
    for v208 = 10, 15 do
        local v209 = string.sub(v203, v208, v208);
        local v210 = 16 - v208;
        if v209 == "1" then
            v200[9][v210] = 2;
        else
            v200[9][v210] = -2;
        end;
    end;
    for v211 = 1, 6 do
        if string.sub(v203, v211, v211) == "1" then
            v200[v211][9] = 2;
        else
            v200[v211][9] = -2;
        end;
    end;
    if string.sub(v203, 7, 7) == "1" then
        v200[8][9] = 2;
    else
        v200[8][9] = -2;
    end;
    for v212 = 8, 15 do
        local v213 = string.sub(v203, v212, v212);
        local v214 = (#v200 - 15) + v212;
        if v213 == "1" then
            v200[v214][9] = 2;
        else
            v200[v214][9] = -2;
        end;
    end;
end;
local v216 = {
    "001010010011111000", 
    "001111011010000100", 
    "100110010101100100", 
    "110010110010010100", 
    "011011111101110100", 
    "010001101110001100", 
    "111000100001101100", 
    "101100000110011100", 
    "000101001001111100", 
    "000111101101000010", 
    "101110100010100010", 
    "111010000101010010", 
    "010011001010110010", 
    "011001011001001010", 
    "110000010110101010", 
    "100100110001011010", 
    "001101111110111010", 
    "001000110111000110", 
    "100001111000100110", 
    "110101011111010110", 
    "011100010000110110", 
    "010110000011001110", 
    "111111001100101110", 
    "101011101011011110", 
    "000010100100111110", 
    "101010111001000001", 
    "000011110110100001", 
    "010111010001010001", 
    "111110011110110001", 
    "110100001101001001", 
    "011101000010101001", 
    "001001100101011001", 
    "100000101010111001", 
    "100101100011000101"
};
local function v234(v217, v218)
    if v218 < 7 then
        return ;
    else
        local _ = #v217;
        local v220 = v216[v218 - 6];
        local v221 = nil;
        local v222 = nil;
        local v223 = nil;
        local v224 = nil;
        local v225 = nil;
        v224 = #v217 - 10;
        v225 = 1;
        for v226 = 1, #v220 do
            v223 = string.sub(v220, v226, v226);
            v221 = v224 + math.fmod(v226 - 1, 3);
            v222 = v225 + math.floor((v226 - 1) / 3);
            local l_v223_0 = v223;
            local l_v221_0 = v221;
            local l_v222_0 = v222;
            if l_v223_0 == "1" then
                v217[l_v221_0][l_v222_0] = 2;
            else
                v217[l_v221_0][l_v222_0] = -2;
            end;
        end;
        v224 = 1;
        v225 = #v217 - 10;
        for v230 = 1, #v220 do
            v223 = string.sub(v220, v230, v230);
            v221 = v224 + math.floor((v230 - 1) / 3);
            v222 = v225 + math.fmod(v230 - 1, 3);
            local l_v223_1 = v223;
            local l_v221_1 = v221;
            local l_v222_1 = v222;
            if l_v223_1 == "1" then
                v217[l_v221_1][l_v222_1] = 2;
            else
                v217[l_v221_1][l_v222_1] = -2;
            end;
        end;
        return ;
    end;
end;
local function v242(v235, v236, v237)
    local v238 = nil;
    local v239 = {};
    v238 = v235 * 4 + 17;
    for v240 = 1, v238 do
        v239[v240] = {};
        for v241 = 1, v238 do
            v239[v240][v241] = 0;
        end;
    end;
    v184(v239);
    v190(v239);
    v234(v239, v235);
    v239[9][v238 - 7] = 2;
    v198(v239);
    v215(v239, v236, v237);
    return v239;
end;
local function v248(v243, v244, v245, v246)
    v244 = v244 - 1;
    v245 = v245 - 1;
    local v247 = false;
    if not (v243 == -1) then
        if v243 == 0 then
            if math.fmod(v244 + v245, 2) == 0 then
                v247 = true;
            end;
        elseif v243 == 1 then
            if math.fmod(v245, 2) == 0 then
                v247 = true;
            end;
        elseif v243 == 2 then
            if math.fmod(v244, 3) == 0 then
                v247 = true;
            end;
        elseif v243 == 3 then
            if math.fmod(v244 + v245, 3) == 0 then
                v247 = true;
            end;
        elseif v243 == 4 then
            if math.fmod(math.floor(v245 / 2) + math.floor(v244 / 3), 2) == 0 then
                v247 = true;
            end;
        elseif v243 == 5 then
            if math.fmod(v244 * v245, 2) + math.fmod(v244 * v245, 3) == 0 then
                v247 = true;
            end;
        elseif v243 == 6 then
            if math.fmod(math.fmod(v244 * v245, 2) + math.fmod(v244 * v245, 3), 2) == 0 then
                v247 = true;
            end;
        elseif v243 == 7 then
            if math.fmod(math.fmod(v244 * v245, 3) + math.fmod(v244 + v245, 2), 2) == 0 then
                v247 = true;
            end;
        else
            assert(false, "This can't happen (mask must be <= 7)");
        end;
    end;
    if not v247 then
        return -1 + 2 * tonumber(v246);
    else
        return 1 - 2 * tonumber(v246);
    end;
end;
local function v257(v249, v250, v251, v252, v253)
    local v254 = {};
    local v255 = 1;
    local v256 = "right";
    while v255 <= #v253 do
        if v256 == "right" and v249[v250][v251] == 0 then
            v254[#v254 + 1] = {
                v250, 
                v251
            };
            v256 = "left";
            v255 = v255 + 1;
        elseif v256 == "left" and v249[v250 - 1][v251] == 0 then
            v254[#v254 + 1] = {
                v250 - 1, 
                v251
            };
            v256 = "right";
            v255 = v255 + 1;
            v251 = if v252 == "up" then v251 - 1 else v251 + 1;
        elseif v256 == "right" and v249[v250 - 1][v251] == 0 then
            v254[#v254 + 1] = {
                v250 - 1, 
                v251
            };
            v255 = v255 + 1;
            v251 = if v252 == "up" then v251 - 1 else v251 + 1;
        else
            v251 = if v252 == "up" then v251 - 1 else v251 + 1;
        end;
        if not (v251 >= 1) or #v249 < v251 then
            v250 = v250 - 2;
            if v250 == 7 then
                v250 = 6;
            end;
            if v252 == "up" then
                v252 = "down";
                v251 = 1;
            else
                v252 = "up";
                v251 = #v249;
            end;
        end;
    end;
    return v254, v250, v251, v252;
end;
local function _(v258, v259, v260)
    size = #v258;
    local v261 = nil;
    local v262 = nil;
    local v263 = nil;
    local v264 = nil;
    local v265 = nil;
    local v266 = nil;
    local v267 = "up";
    local v268 = 0;
    v261 = size;
    v262 = size;
    string.gsub(v259, ".?.?.?.?.?.?.?.?", function(v269)
        v268 = v268 + 1;
        local v270, v271, v272, v273 = v257(v258, v261, v262, v267, v269, v260);
        v263 = v270;
        v261 = v271;
        v262 = v272;
        v267 = v273;
        for v274 = 1, #v269 do
            v264 = v263[v274][1];
            v265 = v263[v274][2];
            v266 = v248(v260, v264, v265, (string.sub(v269, v274, v274)));
            if not debugging then
                v258[v264][v265] = v266;
            else
                v258[v264][v265] = v266 * (v274 + 10);
            end;
        end;
    end);
end;
local function v292(v276)
    local v277 = 0;
    local v278 = 0;
    local v279 = 0;
    local _ = 0;
    local v281 = #v276;
    local v282 = 0;
    local v283 = nil;
    local v284 = nil;
    local v285 = nil;
    for v286 = 1, v281 do
        v285 = 0;
        v283 = nil;
        for v287 = 1, v281 do
            if v276[v286][v287] > 0 then
                v282 = v282 + 1;
                v284 = false;
            else
                v284 = true;
            end;
            v284 = v276[v286][v287] < 0;
            if v283 == v284 then
                v285 = v285 + 1;
            else
                if v285 >= 5 then
                    v277 = (v277 + v285) - 2;
                end;
                v285 = 1;
            end;
            v283 = v284;
        end;
        if v285 >= 5 then
            v277 = (v277 + v285) - 2;
        end;
    end;
    for v288 = 1, v281 do
        v285 = 0;
        v283 = nil;
        for v289 = 1, v281 do
            v284 = v276[v289][v288] < 0;
            if v283 == v284 then
                v285 = v285 + 1;
            else
                if v285 >= 5 then
                    v277 = (v277 + v285) - 2;
                end;
                v285 = 1;
            end;
            v283 = v284;
        end;
        if v285 >= 5 then
            v277 = (v277 + v285) - 2;
        end;
    end;
    for v290 = 1, v281 do
        for v291 = 1, v281 do
            if (v291 < v281 - 1 and v290 < v281 - 1) and (not (not ((v276[v290][v291] < 0 and v276[v290 + 1][v291] < 0) and v276[v290][v291 + 1] < 0) or v276[v290 + 1][v291 + 1] >= 0) or ((v276[v290][v291] > 0 and v276[v290 + 1][v291] > 0) and v276[v290][v291 + 1] > 0) and v276[v290 + 1][v291 + 1] > 0) then
                v278 = v278 + 3;
            end;
            if (((((((v291 + 6 < v281 and v276[v290][v291] > 0) and v276[v290][v291 + 1] < 0) and v276[v290][v291 + 2] > 0) and v276[v290][v291 + 3] > 0) and v276[v290][v291 + 4] > 0) and v276[v290][v291 + 5] < 0) and v276[v290][v291 + 6] > 0) and (not (not (((v291 + 10 < v281 and v276[v290][v291 + 7] < 0) and v276[v290][v291 + 8] < 0) and v276[v290][v291 + 9] < 0) or v276[v290][v291 + 10] >= 0) or (((v291 - 4 >= 1 and v276[v290][v291 - 1] < 0) and v276[v290][v291 - 2] < 0) and v276[v290][v291 - 3] < 0) and v276[v290][v291 - 4] < 0) then
                v279 = v279 + 40;
            end;
            if (((((((v290 + 6 <= v281 and v276[v290][v291] > 0) and v276[v290 + 1][v291] < 0) and v276[v290 + 2][v291] > 0) and v276[v290 + 3][v291] > 0) and v276[v290 + 4][v291] > 0) and v276[v290 + 5][v291] < 0) and v276[v290 + 6][v291] > 0) and (not (not (((v290 + 10 <= v281 and v276[v290 + 7][v291] < 0) and v276[v290 + 8][v291] < 0) and v276[v290 + 9][v291] < 0) or v276[v290 + 10][v291] >= 0) or (((v290 - 4 >= 1 and v276[v290 - 1][v291] < 0) and v276[v290 - 2][v291] < 0) and v276[v290 - 3][v291] < 0) and v276[v290 - 4][v291] < 0) then
                v279 = v279 + 40;
            end;
        end;
    end;
    return ((v277 + v278) + v279) + math.floor((math.abs((v282 / (v281 * v281)) * 100 - 50))) * 2;
end;
local function _(v293, v294, v295, v296)
    local v297 = v242(v293, v294, v296);
    size = #v297;
    local v298 = nil;
    local v299 = nil;
    local v300 = nil;
    local v301 = nil;
    local v302 = nil;
    local v303 = nil;
    local v304 = "up";
    local v305 = 0;
    v298 = size;
    v299 = size;
    do
        local l_v298_0, l_v299_0, l_v300_0, l_v301_0, l_v302_0, l_v303_0, l_v304_0, l_v305_0 = v298, v299, v300, v301, v302, v303, v304, v305;
        string.gsub(v295, ".?.?.?.?.?.?.?.?", function(v314)
            l_v305_0 = l_v305_0 + 1;
            local v315, v316, v317, v318 = v257(v297, l_v298_0, l_v299_0, l_v304_0, v314, v296);
            l_v300_0 = v315;
            l_v298_0 = v316;
            l_v299_0 = v317;
            l_v304_0 = v318;
            for v319 = 1, #v314 do
                l_v301_0 = l_v300_0[v319][1];
                l_v302_0 = l_v300_0[v319][2];
                l_v303_0 = v248(v296, l_v301_0, l_v302_0, (string.sub(v314, v319, v319)));
                if not debugging then
                    v297[l_v301_0][l_v302_0] = l_v303_0;
                else
                    v297[l_v301_0][l_v302_0] = l_v303_0 * (v319 + 10);
                end;
            end;
        end);
    end;
    return v297, (v292(v297));
end;
local function v373(v321, v322, v323)
    local v324 = nil;
    local v325 = nil;
    local v326 = nil;
    local v327 = nil;
    local v328 = v242(v321, v322, 0);
    size = #v328;
    local v329 = nil;
    local v330 = nil;
    local v331 = nil;
    local v332 = nil;
    local v333 = nil;
    local v334 = nil;
    local v335 = "up";
    local v336 = 0;
    v329 = size;
    v330 = size;
    local l_gsub_0 = string.gsub;
    local l_v323_0 = v323;
    local v339 = ".?.?.?.?.?.?.?.?";
    local v340 = 0;
    local l_v328_0 = v328 --[[ copy: 9 -> 23 ]];
    do
        local l_v329_0, l_v330_0, l_v331_0, l_v332_0, l_v333_0, l_v334_0, l_v335_0, l_v336_0 = v329, v330, v331, v332, v333, v334, v335, v336;
        l_gsub_0(l_v323_0, v339, function(v350)
            l_v336_0 = l_v336_0 + 1;
            local v351, v352, v353, v354 = v257(l_v328_0, l_v329_0, l_v330_0, l_v335_0, v350, v340);
            l_v331_0 = v351;
            l_v329_0 = v352;
            l_v330_0 = v353;
            l_v335_0 = v354;
            for v355 = 1, #v350 do
                l_v332_0 = l_v331_0[v355][1];
                l_v333_0 = l_v331_0[v355][2];
                l_v334_0 = v248(v340, l_v332_0, l_v333_0, (string.sub(v350, v355, v355)));
                if not debugging then
                    l_v328_0[l_v332_0][l_v333_0] = l_v334_0;
                else
                    l_v328_0[l_v332_0][l_v333_0] = l_v334_0 * (v355 + 10);
                end;
            end;
        end);
    end;
    v329 = v292(v328);
    local l_v328_1 = v328;
    local l_v329_1 = v329;
    v326 = l_v328_1;
    v327 = l_v329_1;
    for v358 = 1, 7 do
        v331 = v242(v321, v322, v358);
        size = #v331;
        v332 = nil;
        v333 = nil;
        v334 = nil;
        v335 = nil;
        v336 = nil;
        l_gsub_0 = nil;
        l_v323_0 = "up";
        v339 = 0;
        v332 = size;
        v333 = size;
        do
            local l_v332_1, l_v333_1, l_v334_1, l_v335_1, l_v336_1, l_l_gsub_0_0, l_l_v323_0_0, l_v339_0 = v332, v333, v334, v335, v336, l_gsub_0, l_v323_0, v339;
            string.gsub(v323, ".?.?.?.?.?.?.?.?", function(v367)
                l_v339_0 = l_v339_0 + 1;
                local v368, v369, v370, v371 = v257(v331, l_v332_1, l_v333_1, l_l_v323_0_0, v367, v358);
                l_v334_1 = v368;
                l_v332_1 = v369;
                l_v333_1 = v370;
                l_l_v323_0_0 = v371;
                for v372 = 1, #v367 do
                    l_v335_1 = l_v334_1[v372][1];
                    l_v336_1 = l_v334_1[v372][2];
                    l_l_gsub_0_0 = v248(v358, l_v335_1, l_v336_1, (string.sub(v367, v372, v372)));
                    if not debugging then
                        v331[l_v335_1][l_v336_1] = l_l_gsub_0_0;
                    else
                        v331[l_v335_1][l_v336_1] = l_l_gsub_0_0 * (v372 + 10);
                    end;
                end;
            end);
        end;
        v332 = v292(v331);
        v329 = v331;
        v330 = v332;
        v324 = v329;
        v325 = v330;
        if v325 < v327 then
            v326 = v324;
            v327 = v325;
        end;
    end;
    return v326;
end;
return {
    encode_string_numeric = v70, 
    encode_string_ascii = v77, 
    qrcode = function(v374, v375, _)
        local v377 = nil;
        local v378 = nil;
        local v379 = nil;
        local v380 = nil;
        local _ = nil;
        local l_v375_0 = v375;
        local v383 = nil;
        v383 = if not string.match(v374, "^[0-9]+$") then string.match(v374, "^[0-9A-Z $%%*./:+-]+$") and 2 or 4 else 1;
        local v384 = nil;
        local v385 = nil;
        local v386, v387 = v48(#v374, v383, l_v375_0);
        v384 = v386;
        v385 = v387;
        v386 = v55(v374, v384, v383);
        local l_v384_0 = v384;
        local l_v385_0 = v385;
        local v390 = v23(v383, 4);
        local l_v383_0 = v383;
        local l_v386_0 = v386;
        v378 = l_v384_0;
        v375 = l_v385_0;
        v379 = v390;
        v380 = l_v383_0;
        l_v384_0 = v379 .. l_v386_0;
        v390 = v380;
        if v390 == 1 then
            l_v383_0 = "";
            l_v386_0 = nil;
            do
                local l_l_v383_0_0, l_l_v386_0_0 = l_v383_0, l_v386_0;
                string.gsub(v374, "..?.?", function(v395)
                    l_l_v386_0_0 = tonumber(v395);
                    if #v395 == 3 then
                        l_l_v383_0_0 = l_l_v383_0_0 .. v23(l_l_v386_0_0, 10);
                        return ;
                    elseif #v395 == 2 then
                        l_l_v383_0_0 = l_l_v383_0_0 .. v23(l_l_v386_0_0, 7);
                        return ;
                    else
                        l_l_v383_0_0 = l_l_v383_0_0 .. v23(l_l_v386_0_0, 4);
                        return ;
                    end;
                end);
                l_v385_0 = l_l_v383_0_0;
            end;
        elseif v390 == 2 then
            l_v383_0 = "";
            l_v386_0 = nil;
            l_v375_0 = nil;
            v383 = nil;
            do
                local l_l_v383_0_1, l_l_v386_0_1, l_l_v375_0_0, l_v383_1 = l_v383_0, l_v386_0, l_v375_0, v383;
                string.gsub(v374, "..?", function(v400)
                    if #v400 == 2 then
                        l_l_v375_0_0 = v65[string.byte((string.sub(v400, 1, 1)))];
                        l_v383_1 = v65[string.byte((string.sub(v400, 2, 2)))];
                        l_l_v386_0_1 = l_l_v375_0_0 * 45 + l_v383_1;
                        l_l_v383_0_1 = l_l_v383_0_1 .. v23(l_l_v386_0_1, 11);
                        return ;
                    else
                        l_l_v386_0_1 = v65[string.byte(v400)];
                        l_l_v383_0_1 = l_l_v383_0_1 .. v23(l_l_v386_0_1, 6);
                        return ;
                    end;
                end);
                l_v385_0 = l_l_v383_0_1;
            end;
        elseif v390 == 4 then
            l_v385_0 = v81(v374);
        else
            assert(false, "not implemented yet");
            l_v385_0 = nil;
        end;
        v377 = v176(v378, v375, (v99(v378, v375, l_v384_0 .. l_v385_0)));
        if math.fmod(#v377, 8) ~= 0 then
            return false, string.format("Arranged data %% 8  data length = %d, mod 8 = %d", #v377, (math.fmod(#v377, 8)));
        else
            return true, (v373(v378, v375, v377 .. string.rep("0", v155[v378])));
        end;
    end, 
    binary = v23, 
    get_mode = v30, 
    get_length = v55, 
    add_pad_data = v99, 
    get_generator_polynominal_adjusted = v114, 
    get_pixel_with_mask = v248, 
    get_version_eclevel_mode_bistringlength = v64, 
    remainder = v155, 
    arrange_codewords_and_calculate_ec = v176, 
    calculate_error_correction = v153, 
    convert_bitstring_to_bytes = v107, 
    bit_xor = v17
};
