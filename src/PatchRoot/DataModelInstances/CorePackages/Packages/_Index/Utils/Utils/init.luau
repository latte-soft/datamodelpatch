local l_Object_0 = require(script.Parent.LuauPolyfill).Object;
local v1 = {};
l_Object_0.assign(v1, (require(script.loaders)));
l_Object_0.assign(v1, (require(script.helpers)));
l_Object_0.assign(v1, (require(script["get-directives"])));
l_Object_0.assign(v1, (require(script["get-arguments-with-directives"])));
l_Object_0.assign(v1, (require(script["get-implementing-types"])));
l_Object_0.assign(v1, (require(script["print-schema-with-directives"])));
l_Object_0.assign(v1, (require(script["get-fields-with-directives"])));
l_Object_0.assign(v1, (require(script["validate-documents"])));
l_Object_0.assign(v1, (require(script["parse-graphql-json"])));
l_Object_0.assign(v1, (require(script["parse-graphql-sdl"])));
l_Object_0.assign(v1, (require(script["build-operation-for-field"])));
l_Object_0.assign(v1, (require(script.types)));
l_Object_0.assign(v1, (require(script.filterSchema)));
l_Object_0.assign(v1, (require(script.heal)));
l_Object_0.assign(v1, (require(script.getResolversFromSchema)));
l_Object_0.assign(v1, (require(script.forEachField)));
l_Object_0.assign(v1, (require(script.forEachDefaultValue)));
l_Object_0.assign(v1, (require(script.mapSchema)));
l_Object_0.assign(v1, (require(script.addTypes)));
l_Object_0.assign(v1, (require(script.rewire)));
l_Object_0.assign(v1, (require(script.prune)));
l_Object_0.assign(v1, (require(script.mergeDeep)));
l_Object_0.assign(v1, (require(script.Interfaces)));
l_Object_0.assign(v1, (require(script.stub)));
l_Object_0.assign(v1, (require(script.selectionSets)));
l_Object_0.assign(v1, (require(script.getResponseKeyFromInfo)));
l_Object_0.assign(v1, (require(script.fields)));
l_Object_0.assign(v1, (require(script.renameType)));
l_Object_0.assign(v1, (require(script.transformInputValue)));
l_Object_0.assign(v1, (require(script.mapAsyncIterator)));
l_Object_0.assign(v1, (require(script.updateArgument)));
l_Object_0.assign(v1, (require(script.implementsAbstractType)));
l_Object_0.assign(v1, (require(script.errors)));
l_Object_0.assign(v1, (require(script.visitResult)));
l_Object_0.assign(v1, (require(script.getArgumentValues)));
l_Object_0.assign(v1, (require(script.valueMatchesCriteria)));
l_Object_0.assign(v1, (require(script.isAsyncIterable)));
l_Object_0.assign(v1, (require(script.isDocumentNode)));
l_Object_0.assign(v1, (require(script.astFromValueUntyped)));
l_Object_0.assign(v1, (require(script.executor)));
l_Object_0.assign(v1, (require(script.AggregateError)));
l_Object_0.assign(v1, (require(script.rootTypes)));
l_Object_0.assign(v1, (require(script.comments)));
l_Object_0.assign(v1, (require(script.collectFields)));
l_Object_0.assign(v1, (require(script.inspect)));
l_Object_0.assign(v1, (require(script.memoize)));
l_Object_0.assign(v1, (require(script.fixSchemaAst)));
l_Object_0.assign(v1, (require(script.getOperationASTFromRequest)));
l_Object_0.assign(v1, (require(script.extractExtensionsFromSchema)));
return v1;
